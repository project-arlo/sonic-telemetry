// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonic.proto

package gnoi_sonic

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SonicOutput struct {
	Status       int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusDetail string `protobuf:"bytes,2,opt,name=status_detail,json=statusDetail,proto3" json:"status-detail" xml:",comment"`
}

func (m *SonicOutput) Reset()      { *m = SonicOutput{} }
func (*SonicOutput) ProtoMessage() {}
func (*SonicOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{0}
}
func (m *SonicOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SonicOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SonicOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SonicOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SonicOutput.Merge(m, src)
}
func (m *SonicOutput) XXX_Size() int {
	return m.Size()
}
func (m *SonicOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SonicOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SonicOutput proto.InternalMessageInfo

func (m *SonicOutput) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SonicOutput) GetStatusDetail() string {
	if m != nil {
		return m.StatusDetail
	}
	return ""
}

type TechsupportRequest struct {
	Input *TechsupportRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-show-techsupport:input" xml:",comment"`
}

func (m *TechsupportRequest) Reset()      { *m = TechsupportRequest{} }
func (*TechsupportRequest) ProtoMessage() {}
func (*TechsupportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{1}
}
func (m *TechsupportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TechsupportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TechsupportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TechsupportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechsupportRequest.Merge(m, src)
}
func (m *TechsupportRequest) XXX_Size() int {
	return m.Size()
}
func (m *TechsupportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TechsupportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TechsupportRequest proto.InternalMessageInfo

func (m *TechsupportRequest) GetInput() *TechsupportRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type TechsupportRequest_Input struct {
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *TechsupportRequest_Input) Reset()      { *m = TechsupportRequest_Input{} }
func (*TechsupportRequest_Input) ProtoMessage() {}
func (*TechsupportRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{1, 0}
}
func (m *TechsupportRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TechsupportRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TechsupportRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TechsupportRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechsupportRequest_Input.Merge(m, src)
}
func (m *TechsupportRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *TechsupportRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_TechsupportRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_TechsupportRequest_Input proto.InternalMessageInfo

func (m *TechsupportRequest_Input) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type TechsupportResponse struct {
	Output *TechsupportResponse_Output `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-show-techsupport:output" xml:",comment"`
}

func (m *TechsupportResponse) Reset()      { *m = TechsupportResponse{} }
func (*TechsupportResponse) ProtoMessage() {}
func (*TechsupportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{2}
}
func (m *TechsupportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TechsupportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TechsupportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TechsupportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechsupportResponse.Merge(m, src)
}
func (m *TechsupportResponse) XXX_Size() int {
	return m.Size()
}
func (m *TechsupportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TechsupportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TechsupportResponse proto.InternalMessageInfo

func (m *TechsupportResponse) GetOutput() *TechsupportResponse_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type TechsupportResponse_Output struct {
	OutputFilename string `protobuf:"bytes,1,opt,name=output_filename,json=outputFilename,proto3" json:"output-filename" xml:",comment"`
}

func (m *TechsupportResponse_Output) Reset()      { *m = TechsupportResponse_Output{} }
func (*TechsupportResponse_Output) ProtoMessage() {}
func (*TechsupportResponse_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{2, 0}
}
func (m *TechsupportResponse_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TechsupportResponse_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TechsupportResponse_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TechsupportResponse_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechsupportResponse_Output.Merge(m, src)
}
func (m *TechsupportResponse_Output) XXX_Size() int {
	return m.Size()
}
func (m *TechsupportResponse_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_TechsupportResponse_Output.DiscardUnknown(m)
}

var xxx_messageInfo_TechsupportResponse_Output proto.InternalMessageInfo

func (m *TechsupportResponse_Output) GetOutputFilename() string {
	if m != nil {
		return m.OutputFilename
	}
	return ""
}

type ClearNeighborsRequest struct {
	Input *ClearNeighborsRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-neighbor:input" xml:",comment"`
}

func (m *ClearNeighborsRequest) Reset()      { *m = ClearNeighborsRequest{} }
func (*ClearNeighborsRequest) ProtoMessage() {}
func (*ClearNeighborsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{3}
}
func (m *ClearNeighborsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearNeighborsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearNeighborsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearNeighborsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNeighborsRequest.Merge(m, src)
}
func (m *ClearNeighborsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClearNeighborsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNeighborsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNeighborsRequest proto.InternalMessageInfo

func (m *ClearNeighborsRequest) GetInput() *ClearNeighborsRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type ClearNeighborsRequest_Input struct {
	Force  bool   `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	Family string `protobuf:"bytes,2,opt,name=family,proto3" json:"family,omitempty"`
	Ip     string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Ifname string `protobuf:"bytes,4,opt,name=ifname,proto3" json:"ifname,omitempty"`
}

func (m *ClearNeighborsRequest_Input) Reset()      { *m = ClearNeighborsRequest_Input{} }
func (*ClearNeighborsRequest_Input) ProtoMessage() {}
func (*ClearNeighborsRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{3, 0}
}
func (m *ClearNeighborsRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearNeighborsRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearNeighborsRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearNeighborsRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNeighborsRequest_Input.Merge(m, src)
}
func (m *ClearNeighborsRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *ClearNeighborsRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNeighborsRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNeighborsRequest_Input proto.InternalMessageInfo

func (m *ClearNeighborsRequest_Input) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ClearNeighborsRequest_Input) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *ClearNeighborsRequest_Input) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ClearNeighborsRequest_Input) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

type ClearNeighborsResponse struct {
	Output *ClearNeighborsResponse_Output `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-neighbor:output" xml:",comment"`
}

func (m *ClearNeighborsResponse) Reset()      { *m = ClearNeighborsResponse{} }
func (*ClearNeighborsResponse) ProtoMessage() {}
func (*ClearNeighborsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{4}
}
func (m *ClearNeighborsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearNeighborsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearNeighborsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearNeighborsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNeighborsResponse.Merge(m, src)
}
func (m *ClearNeighborsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClearNeighborsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNeighborsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNeighborsResponse proto.InternalMessageInfo

func (m *ClearNeighborsResponse) GetOutput() *ClearNeighborsResponse_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type ClearNeighborsResponse_Output struct {
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *ClearNeighborsResponse_Output) Reset()      { *m = ClearNeighborsResponse_Output{} }
func (*ClearNeighborsResponse_Output) ProtoMessage() {}
func (*ClearNeighborsResponse_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{4, 0}
}
func (m *ClearNeighborsResponse_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearNeighborsResponse_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearNeighborsResponse_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearNeighborsResponse_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearNeighborsResponse_Output.Merge(m, src)
}
func (m *ClearNeighborsResponse_Output) XXX_Size() int {
	return m.Size()
}
func (m *ClearNeighborsResponse_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearNeighborsResponse_Output.DiscardUnknown(m)
}

var xxx_messageInfo_ClearNeighborsResponse_Output proto.InternalMessageInfo

func (m *ClearNeighborsResponse_Output) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type SumRequest struct {
	Input *SumRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-tests:input" xml:",comment"`
}

func (m *SumRequest) Reset()      { *m = SumRequest{} }
func (*SumRequest) ProtoMessage() {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{5}
}
func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return m.Size()
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetInput() *SumRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type SumRequest_Input struct {
	Left  int32 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	Right int32 `protobuf:"varint,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (m *SumRequest_Input) Reset()      { *m = SumRequest_Input{} }
func (*SumRequest_Input) ProtoMessage() {}
func (*SumRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{5, 0}
}
func (m *SumRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest_Input.Merge(m, src)
}
func (m *SumRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *SumRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest_Input proto.InternalMessageInfo

func (m *SumRequest_Input) GetLeft() int32 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *SumRequest_Input) GetRight() int32 {
	if m != nil {
		return m.Right
	}
	return 0
}

type SumResponse struct {
	Output *SumResponse_Output `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-tests:output" xml:",comment"`
}

func (m *SumResponse) Reset()      { *m = SumResponse{} }
func (*SumResponse) ProtoMessage() {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{6}
}
func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(m, src)
}
func (m *SumResponse) XXX_Size() int {
	return m.Size()
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetOutput() *SumResponse_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type SumResponse_Output struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SumResponse_Output) Reset()      { *m = SumResponse_Output{} }
func (*SumResponse_Output) ProtoMessage() {}
func (*SumResponse_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{6, 0}
}
func (m *SumResponse_Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SumResponse_Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SumResponse_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SumResponse_Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse_Output.Merge(m, src)
}
func (m *SumResponse_Output) XXX_Size() int {
	return m.Size()
}
func (m *SumResponse_Output) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse_Output.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse_Output proto.InternalMessageInfo

func (m *SumResponse_Output) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type CopyConfigRequest struct {
	Input *CopyConfigRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-config-mgmt:input" xml:",comment"`
}

func (m *CopyConfigRequest) Reset()      { *m = CopyConfigRequest{} }
func (*CopyConfigRequest) ProtoMessage() {}
func (*CopyConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{7}
}
func (m *CopyConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyConfigRequest.Merge(m, src)
}
func (m *CopyConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *CopyConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CopyConfigRequest proto.InternalMessageInfo

func (m *CopyConfigRequest) GetInput() *CopyConfigRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type CopyConfigRequest_Input struct {
	Source      string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Overwrite   bool   `protobuf:"varint,2,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (m *CopyConfigRequest_Input) Reset()      { *m = CopyConfigRequest_Input{} }
func (*CopyConfigRequest_Input) ProtoMessage() {}
func (*CopyConfigRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{7, 0}
}
func (m *CopyConfigRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyConfigRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyConfigRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyConfigRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyConfigRequest_Input.Merge(m, src)
}
func (m *CopyConfigRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *CopyConfigRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyConfigRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_CopyConfigRequest_Input proto.InternalMessageInfo

func (m *CopyConfigRequest_Input) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CopyConfigRequest_Input) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *CopyConfigRequest_Input) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type CopyConfigResponse struct {
	Output *SonicOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-config-mgmt:output" xml:",comment"`
}

func (m *CopyConfigResponse) Reset()      { *m = CopyConfigResponse{} }
func (*CopyConfigResponse) ProtoMessage() {}
func (*CopyConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{8}
}
func (m *CopyConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyConfigResponse.Merge(m, src)
}
func (m *CopyConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *CopyConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CopyConfigResponse proto.InternalMessageInfo

func (m *CopyConfigResponse) GetOutput() *SonicOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type ImageInstallRequest struct {
	Input *ImageInstallRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-image-management:input" xml:",comment"`
}

func (m *ImageInstallRequest) Reset()      { *m = ImageInstallRequest{} }
func (*ImageInstallRequest) ProtoMessage() {}
func (*ImageInstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{9}
}
func (m *ImageInstallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageInstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageInstallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageInstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInstallRequest.Merge(m, src)
}
func (m *ImageInstallRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageInstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInstallRequest proto.InternalMessageInfo

func (m *ImageInstallRequest) GetInput() *ImageInstallRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type ImageInstallRequest_Input struct {
	Imagename string `protobuf:"bytes,2,opt,name=imagename,proto3" json:"imagename,omitempty"`
}

func (m *ImageInstallRequest_Input) Reset()      { *m = ImageInstallRequest_Input{} }
func (*ImageInstallRequest_Input) ProtoMessage() {}
func (*ImageInstallRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{9, 0}
}
func (m *ImageInstallRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageInstallRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageInstallRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageInstallRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInstallRequest_Input.Merge(m, src)
}
func (m *ImageInstallRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *ImageInstallRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInstallRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInstallRequest_Input proto.InternalMessageInfo

func (m *ImageInstallRequest_Input) GetImagename() string {
	if m != nil {
		return m.Imagename
	}
	return ""
}

type ImageInstallResponse struct {
	Output *SonicOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-image-management:output" xml:",comment"`
}

func (m *ImageInstallResponse) Reset()      { *m = ImageInstallResponse{} }
func (*ImageInstallResponse) ProtoMessage() {}
func (*ImageInstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{10}
}
func (m *ImageInstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageInstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageInstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageInstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInstallResponse.Merge(m, src)
}
func (m *ImageInstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageInstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInstallResponse proto.InternalMessageInfo

func (m *ImageInstallResponse) GetOutput() *SonicOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type ImageRemoveRequest struct {
	Input *ImageRemoveRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-image-management:input" xml:",comment"`
}

func (m *ImageRemoveRequest) Reset()      { *m = ImageRemoveRequest{} }
func (*ImageRemoveRequest) ProtoMessage() {}
func (*ImageRemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{11}
}
func (m *ImageRemoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRemoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageRemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRemoveRequest.Merge(m, src)
}
func (m *ImageRemoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageRemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRemoveRequest proto.InternalMessageInfo

func (m *ImageRemoveRequest) GetInput() *ImageRemoveRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type ImageRemoveRequest_Input struct {
	Imagename string `protobuf:"bytes,1,opt,name=imagename,proto3" json:"imagename,omitempty"`
}

func (m *ImageRemoveRequest_Input) Reset()      { *m = ImageRemoveRequest_Input{} }
func (*ImageRemoveRequest_Input) ProtoMessage() {}
func (*ImageRemoveRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{11, 0}
}
func (m *ImageRemoveRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRemoveRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRemoveRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageRemoveRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRemoveRequest_Input.Merge(m, src)
}
func (m *ImageRemoveRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *ImageRemoveRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRemoveRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRemoveRequest_Input proto.InternalMessageInfo

func (m *ImageRemoveRequest_Input) GetImagename() string {
	if m != nil {
		return m.Imagename
	}
	return ""
}

type ImageRemoveResponse struct {
	Output *SonicOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-image-management:output" xml:",comment"`
}

func (m *ImageRemoveResponse) Reset()      { *m = ImageRemoveResponse{} }
func (*ImageRemoveResponse) ProtoMessage() {}
func (*ImageRemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{12}
}
func (m *ImageRemoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageRemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageRemoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageRemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRemoveResponse.Merge(m, src)
}
func (m *ImageRemoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageRemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRemoveResponse proto.InternalMessageInfo

func (m *ImageRemoveResponse) GetOutput() *SonicOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type ImageDefaultRequest struct {
	Input *ImageDefaultRequest_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"sonic-image-management:input" xml:",comment"`
}

func (m *ImageDefaultRequest) Reset()      { *m = ImageDefaultRequest{} }
func (*ImageDefaultRequest) ProtoMessage() {}
func (*ImageDefaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{13}
}
func (m *ImageDefaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageDefaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageDefaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageDefaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDefaultRequest.Merge(m, src)
}
func (m *ImageDefaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImageDefaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDefaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDefaultRequest proto.InternalMessageInfo

func (m *ImageDefaultRequest) GetInput() *ImageDefaultRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type ImageDefaultRequest_Input struct {
	Imagename string `protobuf:"bytes,1,opt,name=imagename,proto3" json:"imagename,omitempty"`
}

func (m *ImageDefaultRequest_Input) Reset()      { *m = ImageDefaultRequest_Input{} }
func (*ImageDefaultRequest_Input) ProtoMessage() {}
func (*ImageDefaultRequest_Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{13, 0}
}
func (m *ImageDefaultRequest_Input) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageDefaultRequest_Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageDefaultRequest_Input.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageDefaultRequest_Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDefaultRequest_Input.Merge(m, src)
}
func (m *ImageDefaultRequest_Input) XXX_Size() int {
	return m.Size()
}
func (m *ImageDefaultRequest_Input) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDefaultRequest_Input.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDefaultRequest_Input proto.InternalMessageInfo

func (m *ImageDefaultRequest_Input) GetImagename() string {
	if m != nil {
		return m.Imagename
	}
	return ""
}

type ImageDefaultResponse struct {
	Output *SonicOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"sonic-image-management:output" xml:",comment"`
}

func (m *ImageDefaultResponse) Reset()      { *m = ImageDefaultResponse{} }
func (*ImageDefaultResponse) ProtoMessage() {}
func (*ImageDefaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{14}
}
func (m *ImageDefaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageDefaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageDefaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageDefaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageDefaultResponse.Merge(m, src)
}
func (m *ImageDefaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImageDefaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageDefaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageDefaultResponse proto.InternalMessageInfo

func (m *ImageDefaultResponse) GetOutput() *SonicOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

type JwtToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ExpiresIn   int64  `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (m *JwtToken) Reset()      { *m = JwtToken{} }
func (*JwtToken) ProtoMessage() {}
func (*JwtToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{15}
}
func (m *JwtToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JwtToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JwtToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JwtToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtToken.Merge(m, src)
}
func (m *JwtToken) XXX_Size() int {
	return m.Size()
}
func (m *JwtToken) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtToken.DiscardUnknown(m)
}

var xxx_messageInfo_JwtToken proto.InternalMessageInfo

func (m *JwtToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *JwtToken) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JwtToken) GetExpiresIn() int64 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

type AuthenticateRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *AuthenticateRequest) Reset()      { *m = AuthenticateRequest{} }
func (*AuthenticateRequest) ProtoMessage() {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{16}
}
func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(m, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthenticateResponse struct {
	Token *JwtToken `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *AuthenticateResponse) Reset()      { *m = AuthenticateResponse{} }
func (*AuthenticateResponse) ProtoMessage() {}
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{17}
}
func (m *AuthenticateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateResponse.Merge(m, src)
}
func (m *AuthenticateResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateResponse proto.InternalMessageInfo

func (m *AuthenticateResponse) GetToken() *JwtToken {
	if m != nil {
		return m.Token
	}
	return nil
}

type RefreshRequest struct {
}

func (m *RefreshRequest) Reset()      { *m = RefreshRequest{} }
func (*RefreshRequest) ProtoMessage() {}
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{18}
}
func (m *RefreshRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshRequest.Merge(m, src)
}
func (m *RefreshRequest) XXX_Size() int {
	return m.Size()
}
func (m *RefreshRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshRequest proto.InternalMessageInfo

type RefreshResponse struct {
	Token *JwtToken `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *RefreshResponse) Reset()      { *m = RefreshResponse{} }
func (*RefreshResponse) ProtoMessage() {}
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d8b4eb81a68e9be, []int{19}
}
func (m *RefreshResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshResponse.Merge(m, src)
}
func (m *RefreshResponse) XXX_Size() int {
	return m.Size()
}
func (m *RefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshResponse proto.InternalMessageInfo

func (m *RefreshResponse) GetToken() *JwtToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*SonicOutput)(nil), "gnoi.sonic.SonicOutput")
	proto.RegisterType((*TechsupportRequest)(nil), "gnoi.sonic.TechsupportRequest")
	proto.RegisterType((*TechsupportRequest_Input)(nil), "gnoi.sonic.TechsupportRequest.Input")
	proto.RegisterType((*TechsupportResponse)(nil), "gnoi.sonic.TechsupportResponse")
	proto.RegisterType((*TechsupportResponse_Output)(nil), "gnoi.sonic.TechsupportResponse.Output")
	proto.RegisterType((*ClearNeighborsRequest)(nil), "gnoi.sonic.ClearNeighborsRequest")
	proto.RegisterType((*ClearNeighborsRequest_Input)(nil), "gnoi.sonic.ClearNeighborsRequest.Input")
	proto.RegisterType((*ClearNeighborsResponse)(nil), "gnoi.sonic.ClearNeighborsResponse")
	proto.RegisterType((*ClearNeighborsResponse_Output)(nil), "gnoi.sonic.ClearNeighborsResponse.Output")
	proto.RegisterType((*SumRequest)(nil), "gnoi.sonic.SumRequest")
	proto.RegisterType((*SumRequest_Input)(nil), "gnoi.sonic.SumRequest.Input")
	proto.RegisterType((*SumResponse)(nil), "gnoi.sonic.SumResponse")
	proto.RegisterType((*SumResponse_Output)(nil), "gnoi.sonic.SumResponse.Output")
	proto.RegisterType((*CopyConfigRequest)(nil), "gnoi.sonic.CopyConfigRequest")
	proto.RegisterType((*CopyConfigRequest_Input)(nil), "gnoi.sonic.CopyConfigRequest.Input")
	proto.RegisterType((*CopyConfigResponse)(nil), "gnoi.sonic.CopyConfigResponse")
	proto.RegisterType((*ImageInstallRequest)(nil), "gnoi.sonic.ImageInstallRequest")
	proto.RegisterType((*ImageInstallRequest_Input)(nil), "gnoi.sonic.ImageInstallRequest.Input")
	proto.RegisterType((*ImageInstallResponse)(nil), "gnoi.sonic.ImageInstallResponse")
	proto.RegisterType((*ImageRemoveRequest)(nil), "gnoi.sonic.ImageRemoveRequest")
	proto.RegisterType((*ImageRemoveRequest_Input)(nil), "gnoi.sonic.ImageRemoveRequest.Input")
	proto.RegisterType((*ImageRemoveResponse)(nil), "gnoi.sonic.ImageRemoveResponse")
	proto.RegisterType((*ImageDefaultRequest)(nil), "gnoi.sonic.ImageDefaultRequest")
	proto.RegisterType((*ImageDefaultRequest_Input)(nil), "gnoi.sonic.ImageDefaultRequest.Input")
	proto.RegisterType((*ImageDefaultResponse)(nil), "gnoi.sonic.ImageDefaultResponse")
	proto.RegisterType((*JwtToken)(nil), "gnoi.sonic.JwtToken")
	proto.RegisterType((*AuthenticateRequest)(nil), "gnoi.sonic.AuthenticateRequest")
	proto.RegisterType((*AuthenticateResponse)(nil), "gnoi.sonic.AuthenticateResponse")
	proto.RegisterType((*RefreshRequest)(nil), "gnoi.sonic.RefreshRequest")
	proto.RegisterType((*RefreshResponse)(nil), "gnoi.sonic.RefreshResponse")
}

func init() { proto.RegisterFile("sonic.proto", fileDescriptor_2d8b4eb81a68e9be) }

var fileDescriptor_2d8b4eb81a68e9be = []byte{
	// 1151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xb6, 0x71, 0xbe, 0xf1, 0x73, 0xbe, 0x09, 0x9d, 0xa4, 0x49, 0xb4, 0x4d, 0x76, 0xd3,
	0x6d, 0x43, 0x43, 0xc1, 0xae, 0x48, 0x39, 0xa0, 0x4a, 0x1c, 0x70, 0x22, 0x44, 0x90, 0x5a, 0xd0,
	0x3a, 0x07, 0x10, 0x42, 0xee, 0xc6, 0x19, 0xdb, 0x23, 0xbc, 0x3b, 0xcb, 0xce, 0x6c, 0xd2, 0x08,
	0x0e, 0xfc, 0x09, 0x70, 0xe7, 0xc2, 0x0d, 0x09, 0xc1, 0xdf, 0xc1, 0x31, 0xc7, 0x9e, 0x16, 0xe2,
	0x70, 0x40, 0x3e, 0x55, 0xfc, 0x05, 0xc8, 0x33, 0xb3, 0xeb, 0x5d, 0xff, 0xc8, 0x86, 0x03, 0xb9,
	0xed, 0x9b, 0xf7, 0x99, 0xf7, 0x3e, 0xf3, 0x79, 0x6f, 0x9e, 0xc7, 0x50, 0x66, 0xd4, 0x23, 0xcd,
	0xaa, 0x1f, 0x50, 0x4e, 0x11, 0xb4, 0x3d, 0x4a, 0xaa, 0x62, 0x45, 0xaf, 0xb4, 0x09, 0xef, 0x84,
	0x87, 0xd5, 0x26, 0x75, 0x1f, 0xb5, 0x69, 0x9b, 0x3e, 0x12, 0x90, 0xc3, 0xb0, 0x25, 0x2c, 0x61,
	0x88, 0x2f, 0xb9, 0xd5, 0xa2, 0x50, 0xae, 0x0f, 0xf6, 0x7d, 0x1c, 0x72, 0x3f, 0xe4, 0x68, 0x05,
	0x66, 0x19, 0x77, 0x78, 0xc8, 0xd6, 0xb4, 0x4d, 0x6d, 0xbb, 0x68, 0x2b, 0x0b, 0x7d, 0x08, 0xff,
	0x97, 0x5f, 0x8d, 0x23, 0xcc, 0x1d, 0xd2, 0x5d, 0xbb, 0xb1, 0xa9, 0x6d, 0x97, 0x6a, 0xf7, 0xfa,
	0x91, 0xa9, 0x1c, 0x15, 0xe9, 0xf8, 0x3b, 0x32, 0x17, 0x5e, 0xb8, 0xdd, 0x27, 0xd6, 0x5b, 0x4d,
	0xea, 0xba, 0xd8, 0xe3, 0x96, 0x3d, 0x2f, 0x01, 0x7b, 0xc2, 0x6f, 0xfd, 0xa8, 0x01, 0x3a, 0xc0,
	0xcd, 0x0e, 0x0b, 0x7d, 0x9f, 0x06, 0xdc, 0xc6, 0x5f, 0x85, 0x98, 0x71, 0xe4, 0x41, 0x91, 0x78,
	0x7e, 0xc8, 0x45, 0xde, 0xf2, 0xce, 0xfd, 0xea, 0xf0, 0x48, 0xd5, 0x71, 0x78, 0x75, 0x7f, 0x80,
	0xad, 0xed, 0xf4, 0x23, 0x73, 0x5d, 0x60, 0x2a, 0xac, 0x43, 0x4f, 0x2a, 0x7c, 0x08, 0x7c, 0x22,
	0xa2, 0x4d, 0x60, 0x23, 0xd3, 0xe8, 0x77, 0xa0, 0x28, 0x62, 0x20, 0x04, 0x33, 0x47, 0x0e, 0xc7,
	0x22, 0x6f, 0xc9, 0x16, 0xdf, 0xd6, 0x9f, 0x1a, 0x2c, 0x65, 0x92, 0x32, 0x9f, 0x7a, 0x0c, 0x23,
	0x06, 0xb3, 0x54, 0xe8, 0xa4, 0x58, 0xbe, 0x3e, 0x95, 0xa5, 0xdc, 0x50, 0x95, 0xaa, 0xd6, 0x1e,
	0xf7, 0x23, 0x73, 0x63, 0x0a, 0x4f, 0x19, 0x70, 0x02, 0x51, 0x95, 0x4a, 0xff, 0x14, 0x66, 0x55,
	0x71, 0x9e, 0xc1, 0xa2, 0x5c, 0x6b, 0xb4, 0x48, 0x17, 0x7b, 0x8e, 0xab, 0x58, 0xd7, 0xb6, 0xfa,
	0x91, 0xa9, 0x5c, 0x95, 0xd8, 0x35, 0x21, 0xe2, 0x82, 0x84, 0x7c, 0xa0, 0x10, 0xd6, 0xb9, 0x06,
	0xb7, 0x77, 0xbb, 0xd8, 0x09, 0x9e, 0x61, 0xd2, 0xee, 0x1c, 0xd2, 0x80, 0xc5, 0xd5, 0x20, 0xd9,
	0x6a, 0x3c, 0x48, 0x9f, 0x73, 0xe2, 0x0e, 0x55, 0x90, 0x87, 0xfd, 0xc8, 0x5c, 0x96, 0x07, 0xf5,
	0x14, 0x22, 0xaf, 0x10, 0x5f, 0xc4, 0x85, 0x58, 0x86, 0x62, 0x8b, 0x06, 0x4d, 0x79, 0xa6, 0x39,
	0x5b, 0x1a, 0x83, 0x86, 0x6c, 0x39, 0x2e, 0xe9, 0x9e, 0xca, 0x8e, 0xb3, 0x95, 0x85, 0x16, 0xe0,
	0x06, 0xf1, 0xd7, 0x6e, 0x8a, 0xb5, 0x1b, 0xc4, 0x1f, 0xe0, 0x48, 0x4b, 0x48, 0x32, 0x23, 0x71,
	0xd2, 0xb2, 0x7e, 0xd5, 0x60, 0x65, 0x94, 0xb1, 0xaa, 0xa6, 0x37, 0x52, 0xcd, 0x37, 0x2e, 0x3b,
	0x65, 0xb6, 0xa0, 0x6f, 0xf6, 0x23, 0xf3, 0xf6, 0xc8, 0x39, 0x73, 0x0b, 0x79, 0x3f, 0x29, 0xa4,
	0x0e, 0x73, 0x81, 0x8a, 0xa8, 0xfa, 0x2e, 0xb1, 0xad, 0x1f, 0x34, 0x80, 0x7a, 0xe8, 0xc6, 0x95,
	0xf8, 0x3c, 0x5b, 0x89, 0xf5, 0x34, 0xc7, 0x21, 0x4c, 0xc9, 0xff, 0xa0, 0x1f, 0x99, 0xb7, 0x24,
	0x2d, 0x8e, 0x19, 0x67, 0x79, 0xda, 0xbf, 0x9d, 0xba, 0x04, 0x5d, 0xdc, 0xe2, 0xea, 0xd2, 0x8b,
	0xef, 0x41, 0x3d, 0x02, 0xd2, 0xee, 0x70, 0x21, 0x7c, 0xd1, 0x96, 0x86, 0xf5, 0xbd, 0x06, 0x65,
	0x91, 0x57, 0x89, 0xf8, 0x7c, 0x44, 0x44, 0x63, 0x8c, 0x60, 0x56, 0xb9, 0xed, 0x7e, 0x64, 0xa2,
	0x34, 0xc5, 0x5c, 0xd9, 0x36, 0x13, 0xd9, 0x56, 0x60, 0x36, 0xc0, 0x2c, 0xec, 0xc6, 0x3c, 0x95,
	0x65, 0x45, 0x1a, 0xdc, 0xda, 0xa5, 0xfe, 0xe9, 0x2e, 0xf5, 0x5a, 0xa4, 0x1d, 0x2b, 0xd7, 0xc9,
	0x2a, 0x77, 0x2f, 0x53, 0xdd, 0x51, 0xb4, 0x12, 0xb0, 0xd2, 0x8f, 0xcc, 0x55, 0xc9, 0xae, 0x29,
	0xdc, 0x15, 0xb7, 0xed, 0xe6, 0xce, 0x92, 0x46, 0x2c, 0xe3, 0x60, 0x7a, 0xd2, 0x30, 0xee, 0xe1,
	0x92, 0xad, 0x2c, 0xb4, 0x0e, 0x25, 0x7a, 0x8c, 0x83, 0x93, 0x80, 0x70, 0x2c, 0xe4, 0x9c, 0xb3,
	0x87, 0x0b, 0x68, 0x13, 0xca, 0x47, 0x98, 0x71, 0xe2, 0x39, 0x9c, 0x50, 0x4f, 0xf5, 0x74, 0x7a,
	0xc9, 0x0a, 0x01, 0xa5, 0x19, 0x2b, 0xe9, 0x1b, 0x23, 0xd2, 0xaf, 0x66, 0xa4, 0x1f, 0x0e, 0xf5,
	0x5a, 0xb5, 0x1f, 0x99, 0x6b, 0xe3, 0xa7, 0xca, 0x53, 0xde, 0xfa, 0x45, 0x83, 0xa5, 0x7d, 0xd7,
	0x69, 0xe3, 0x7d, 0x8f, 0x71, 0xa7, 0xdb, 0x8d, 0x95, 0xa5, 0x59, 0x65, 0xb7, 0xd2, 0x79, 0x27,
	0xe0, 0xc7, 0x87, 0x35, 0x19, 0x80, 0x2a, 0xae, 0xe3, 0x39, 0x6d, 0x3c, 0x48, 0x99, 0x27, 0xf0,
	0x56, 0x2c, 0xf0, 0x3a, 0x94, 0xc4, 0x5e, 0x71, 0xd1, 0xe5, 0x40, 0x18, 0x2e, 0x58, 0xdf, 0xc0,
	0x72, 0x36, 0xbd, 0x12, 0xea, 0xe8, 0xaa, 0x42, 0xa5, 0xe6, 0xf4, 0x18, 0xc5, 0x5c, 0xb5, 0x7e,
	0xd6, 0x00, 0x89, 0xf4, 0x36, 0x76, 0xe9, 0x31, 0xbe, 0xca, 0x0f, 0xdb, 0x38, 0xfc, 0xbf, 0xd2,
	0x4a, 0x1b, 0xd5, 0xea, 0x6b, 0x55, 0xda, 0x38, 0xfb, 0xb5, 0x4a, 0x95, 0x34, 0xd6, 0x1e, 0x6e,
	0x39, 0x61, 0x97, 0x5f, 0xb9, 0xb1, 0xb2, 0xf8, 0x6b, 0x13, 0x2b, 0x6e, 0xac, 0x24, 0xfd, 0xb5,
	0xaa, 0xf5, 0x1c, 0xe6, 0x3e, 0x3a, 0xe1, 0x07, 0xf4, 0x4b, 0xec, 0xa1, 0xbb, 0x30, 0xef, 0x34,
	0x9b, 0x98, 0xb1, 0x06, 0x1f, 0xd8, 0x8a, 0x6a, 0x59, 0xae, 0x49, 0x08, 0x82, 0x19, 0x7e, 0xea,
	0xc7, 0xd7, 0x43, 0x7c, 0xa3, 0x0d, 0x00, 0xfc, 0xc2, 0x27, 0x01, 0x66, 0x0d, 0x22, 0x27, 0xcc,
	0x4d, 0xbb, 0xa4, 0x56, 0xf6, 0x3d, 0xeb, 0x29, 0x2c, 0xbd, 0x1f, 0xf2, 0x0e, 0xf6, 0x38, 0x69,
	0x3a, 0x3c, 0x69, 0x5d, 0x1d, 0xe6, 0x42, 0x86, 0x83, 0x94, 0x26, 0x89, 0x3d, 0xf0, 0xf9, 0x0e,
	0x63, 0x27, 0x34, 0x38, 0x52, 0x99, 0x12, 0xdb, 0xaa, 0xc1, 0x72, 0x36, 0x9c, 0x92, 0xeb, 0x21,
	0x14, 0x0f, 0x12, 0xd6, 0xe5, 0x9d, 0xe5, 0xb4, 0x5a, 0xf1, 0x09, 0x6d, 0x09, 0xb1, 0x5e, 0x83,
	0x05, 0x1b, 0xb7, 0x02, 0xcc, 0x3a, 0x8a, 0x8d, 0xf5, 0x1e, 0x2c, 0x26, 0x2b, 0xff, 0x3e, 0xe0,
	0xce, 0xef, 0x45, 0x98, 0x17, 0x25, 0xa9, 0xe3, 0xe0, 0x98, 0x34, 0x31, 0x3a, 0x80, 0xc5, 0x7a,
	0x87, 0x9e, 0xa4, 0x9e, 0x6d, 0xc8, 0xb8, 0xfc, 0xd5, 0xa9, 0x9b, 0x39, 0xef, 0x3d, 0xab, 0x80,
	0xde, 0x85, 0x9b, 0xf5, 0xd0, 0x45, 0x2b, 0x93, 0x7f, 0xa7, 0xf5, 0xd5, 0x29, 0x3f, 0x8f, 0x56,
	0x01, 0x3d, 0x05, 0x18, 0x0e, 0x79, 0xb4, 0x71, 0xe9, 0xcf, 0x95, 0x6e, 0x4c, 0x73, 0x27, 0xe1,
	0xea, 0x30, 0x9f, 0x1e, 0x86, 0xc8, 0xcc, 0x99, 0xd2, 0xfa, 0xe6, 0x74, 0x40, 0x12, 0xf4, 0x13,
	0x28, 0xa7, 0xa6, 0x46, 0x56, 0xaf, 0xf1, 0x61, 0xa6, 0x9b, 0x53, 0xfd, 0x63, 0x34, 0xd5, 0xd5,
	0x9a, 0x40, 0x33, 0x7b, 0xe7, 0x27, 0xd0, 0x1c, 0xb9, 0x95, 0x32, 0x68, 0xba, 0x01, 0xb3, 0x41,
	0x27, 0x74, 0x7a, 0x36, 0xe8, 0xa4, 0xde, 0xb5, 0x0a, 0x68, 0x0f, 0xfe, 0xa7, 0xfa, 0x0f, 0xe9,
	0x69, 0x78, 0xb6, 0x4d, 0xf5, 0x3b, 0x13, 0x7d, 0x49, 0x94, 0xcf, 0x60, 0x21, 0xfb, 0xb4, 0x44,
	0x77, 0x73, 0x1f, 0xd7, 0xba, 0x95, 0xff, 0x32, 0xb5, 0x0a, 0xb5, 0x77, 0xce, 0xce, 0x8d, 0xc2,
	0xcb, 0x73, 0xa3, 0xf0, 0xea, 0xdc, 0xd0, 0xbe, 0xed, 0x19, 0xda, 0x4f, 0x3d, 0x43, 0xfb, 0xad,
	0x67, 0x68, 0x67, 0x3d, 0x43, 0xfb, 0xa3, 0x67, 0x68, 0x7f, 0xf5, 0x8c, 0xc2, 0xab, 0x9e, 0xa1,
	0x7d, 0x77, 0x61, 0x14, 0xce, 0x2e, 0x8c, 0xc2, 0xcb, 0x0b, 0xa3, 0x70, 0x38, 0x2b, 0xfe, 0x07,
	0x3e, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x18, 0x88, 0xd8, 0xe0, 0x51, 0x0e, 0x00, 0x00,
}

func (this *SonicOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SonicOutput)
	if !ok {
		that2, ok := that.(SonicOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StatusDetail != that1.StatusDetail {
		return false
	}
	return true
}
func (this *TechsupportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TechsupportRequest)
	if !ok {
		that2, ok := that.(TechsupportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *TechsupportRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TechsupportRequest_Input)
	if !ok {
		that2, ok := that.(TechsupportRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *TechsupportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TechsupportResponse)
	if !ok {
		that2, ok := that.(TechsupportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *TechsupportResponse_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TechsupportResponse_Output)
	if !ok {
		that2, ok := that.(TechsupportResponse_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OutputFilename != that1.OutputFilename {
		return false
	}
	return true
}
func (this *ClearNeighborsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearNeighborsRequest)
	if !ok {
		that2, ok := that.(ClearNeighborsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *ClearNeighborsRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearNeighborsRequest_Input)
	if !ok {
		that2, ok := that.(ClearNeighborsRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Force != that1.Force {
		return false
	}
	if this.Family != that1.Family {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Ifname != that1.Ifname {
		return false
	}
	return true
}
func (this *ClearNeighborsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearNeighborsResponse)
	if !ok {
		that2, ok := that.(ClearNeighborsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *ClearNeighborsResponse_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClearNeighborsResponse_Output)
	if !ok {
		that2, ok := that.(ClearNeighborsResponse_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Response != that1.Response {
		return false
	}
	return true
}
func (this *SumRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SumRequest)
	if !ok {
		that2, ok := that.(SumRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *SumRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SumRequest_Input)
	if !ok {
		that2, ok := that.(SumRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Left != that1.Left {
		return false
	}
	if this.Right != that1.Right {
		return false
	}
	return true
}
func (this *SumResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SumResponse)
	if !ok {
		that2, ok := that.(SumResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *SumResponse_Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SumResponse_Output)
	if !ok {
		that2, ok := that.(SumResponse_Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *CopyConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CopyConfigRequest)
	if !ok {
		that2, ok := that.(CopyConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *CopyConfigRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CopyConfigRequest_Input)
	if !ok {
		that2, ok := that.(CopyConfigRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Overwrite != that1.Overwrite {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	return true
}
func (this *CopyConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CopyConfigResponse)
	if !ok {
		that2, ok := that.(CopyConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *ImageInstallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageInstallRequest)
	if !ok {
		that2, ok := that.(ImageInstallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *ImageInstallRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageInstallRequest_Input)
	if !ok {
		that2, ok := that.(ImageInstallRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Imagename != that1.Imagename {
		return false
	}
	return true
}
func (this *ImageInstallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageInstallResponse)
	if !ok {
		that2, ok := that.(ImageInstallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *ImageRemoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageRemoveRequest)
	if !ok {
		that2, ok := that.(ImageRemoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *ImageRemoveRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageRemoveRequest_Input)
	if !ok {
		that2, ok := that.(ImageRemoveRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Imagename != that1.Imagename {
		return false
	}
	return true
}
func (this *ImageRemoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageRemoveResponse)
	if !ok {
		that2, ok := that.(ImageRemoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *ImageDefaultRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageDefaultRequest)
	if !ok {
		that2, ok := that.(ImageDefaultRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	return true
}
func (this *ImageDefaultRequest_Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageDefaultRequest_Input)
	if !ok {
		that2, ok := that.(ImageDefaultRequest_Input)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Imagename != that1.Imagename {
		return false
	}
	return true
}
func (this *ImageDefaultResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageDefaultResponse)
	if !ok {
		that2, ok := that.(ImageDefaultResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *JwtToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JwtToken)
	if !ok {
		that2, ok := that.(JwtToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ExpiresIn != that1.ExpiresIn {
		return false
	}
	return true
}
func (this *AuthenticateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticateRequest)
	if !ok {
		that2, ok := that.(AuthenticateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *AuthenticateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticateResponse)
	if !ok {
		that2, ok := that.(AuthenticateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *RefreshRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshRequest)
	if !ok {
		that2, ok := that.(RefreshRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RefreshResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RefreshResponse)
	if !ok {
		that2, ok := that.(RefreshResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *SonicOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gnoi_sonic.SonicOutput{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "StatusDetail: "+fmt.Sprintf("%#v", this.StatusDetail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TechsupportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.TechsupportRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TechsupportRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.TechsupportRequest_Input{")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TechsupportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.TechsupportResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TechsupportResponse_Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.TechsupportResponse_Output{")
	s = append(s, "OutputFilename: "+fmt.Sprintf("%#v", this.OutputFilename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearNeighborsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ClearNeighborsRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearNeighborsRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gnoi_sonic.ClearNeighborsRequest_Input{")
	s = append(s, "Force: "+fmt.Sprintf("%#v", this.Force)+",\n")
	s = append(s, "Family: "+fmt.Sprintf("%#v", this.Family)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Ifname: "+fmt.Sprintf("%#v", this.Ifname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearNeighborsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ClearNeighborsResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClearNeighborsResponse_Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ClearNeighborsResponse_Output{")
	s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SumRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.SumRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SumRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gnoi_sonic.SumRequest_Input{")
	s = append(s, "Left: "+fmt.Sprintf("%#v", this.Left)+",\n")
	s = append(s, "Right: "+fmt.Sprintf("%#v", this.Right)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SumResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.SumResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SumResponse_Output) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.SumResponse_Output{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CopyConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.CopyConfigRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CopyConfigRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gnoi_sonic.CopyConfigRequest_Input{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Overwrite: "+fmt.Sprintf("%#v", this.Overwrite)+",\n")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CopyConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.CopyConfigResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageInstallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageInstallRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageInstallRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageInstallRequest_Input{")
	s = append(s, "Imagename: "+fmt.Sprintf("%#v", this.Imagename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageInstallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageInstallResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageRemoveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageRemoveRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageRemoveRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageRemoveRequest_Input{")
	s = append(s, "Imagename: "+fmt.Sprintf("%#v", this.Imagename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageRemoveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageRemoveResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageDefaultRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageDefaultRequest{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageDefaultRequest_Input) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageDefaultRequest_Input{")
	s = append(s, "Imagename: "+fmt.Sprintf("%#v", this.Imagename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageDefaultResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.ImageDefaultResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JwtToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&gnoi_sonic.JwtToken{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&gnoi_sonic.AuthenticateRequest{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.AuthenticateResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gnoi_sonic.RefreshRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RefreshResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gnoi_sonic.RefreshResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSonic(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SonicServiceClient is the client API for SonicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SonicServiceClient interface {
	ShowTechsupport(ctx context.Context, in *TechsupportRequest, opts ...grpc.CallOption) (*TechsupportResponse, error)
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	CopyConfig(ctx context.Context, in *CopyConfigRequest, opts ...grpc.CallOption) (*CopyConfigResponse, error)
	ImageInstall(ctx context.Context, in *ImageInstallRequest, opts ...grpc.CallOption) (*ImageInstallResponse, error)
	ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error)
	ImageDefault(ctx context.Context, in *ImageDefaultRequest, opts ...grpc.CallOption) (*ImageDefaultResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	ClearNeighbors(ctx context.Context, in *ClearNeighborsRequest, opts ...grpc.CallOption) (*ClearNeighborsResponse, error)
}

type sonicServiceClient struct {
	cc *grpc.ClientConn
}

func NewSonicServiceClient(cc *grpc.ClientConn) SonicServiceClient {
	return &sonicServiceClient{cc}
}

func (c *sonicServiceClient) ShowTechsupport(ctx context.Context, in *TechsupportRequest, opts ...grpc.CallOption) (*TechsupportResponse, error) {
	out := new(TechsupportResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/ShowTechsupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) CopyConfig(ctx context.Context, in *CopyConfigRequest, opts ...grpc.CallOption) (*CopyConfigResponse, error) {
	out := new(CopyConfigResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/CopyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) ImageInstall(ctx context.Context, in *ImageInstallRequest, opts ...grpc.CallOption) (*ImageInstallResponse, error) {
	out := new(ImageInstallResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/ImageInstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error) {
	out := new(ImageRemoveResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/ImageRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) ImageDefault(ctx context.Context, in *ImageDefaultRequest, opts ...grpc.CallOption) (*ImageDefaultResponse, error) {
	out := new(ImageDefaultResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/ImageDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sonicServiceClient) ClearNeighbors(ctx context.Context, in *ClearNeighborsRequest, opts ...grpc.CallOption) (*ClearNeighborsResponse, error) {
	out := new(ClearNeighborsResponse)
	err := c.cc.Invoke(ctx, "/gnoi.sonic.SonicService/ClearNeighbors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SonicServiceServer is the server API for SonicService service.
type SonicServiceServer interface {
	ShowTechsupport(context.Context, *TechsupportRequest) (*TechsupportResponse, error)
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	CopyConfig(context.Context, *CopyConfigRequest) (*CopyConfigResponse, error)
	ImageInstall(context.Context, *ImageInstallRequest) (*ImageInstallResponse, error)
	ImageRemove(context.Context, *ImageRemoveRequest) (*ImageRemoveResponse, error)
	ImageDefault(context.Context, *ImageDefaultRequest) (*ImageDefaultResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	ClearNeighbors(context.Context, *ClearNeighborsRequest) (*ClearNeighborsResponse, error)
}

// UnimplementedSonicServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSonicServiceServer struct {
}

func (*UnimplementedSonicServiceServer) ShowTechsupport(ctx context.Context, req *TechsupportRequest) (*TechsupportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTechsupport not implemented")
}
func (*UnimplementedSonicServiceServer) Sum(ctx context.Context, req *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedSonicServiceServer) CopyConfig(ctx context.Context, req *CopyConfigRequest) (*CopyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyConfig not implemented")
}
func (*UnimplementedSonicServiceServer) ImageInstall(ctx context.Context, req *ImageInstallRequest) (*ImageInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageInstall not implemented")
}
func (*UnimplementedSonicServiceServer) ImageRemove(ctx context.Context, req *ImageRemoveRequest) (*ImageRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageRemove not implemented")
}
func (*UnimplementedSonicServiceServer) ImageDefault(ctx context.Context, req *ImageDefaultRequest) (*ImageDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageDefault not implemented")
}
func (*UnimplementedSonicServiceServer) Authenticate(ctx context.Context, req *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (*UnimplementedSonicServiceServer) Refresh(ctx context.Context, req *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedSonicServiceServer) ClearNeighbors(ctx context.Context, req *ClearNeighborsRequest) (*ClearNeighborsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearNeighbors not implemented")
}

func RegisterSonicServiceServer(s *grpc.Server, srv SonicServiceServer) {
	s.RegisterService(&_SonicService_serviceDesc, srv)
}

func _SonicService_ShowTechsupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechsupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ShowTechsupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ShowTechsupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ShowTechsupport(ctx, req.(*TechsupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_CopyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).CopyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/CopyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).CopyConfig(ctx, req.(*CopyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_ImageInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ImageInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ImageInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ImageInstall(ctx, req.(*ImageInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_ImageRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ImageRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ImageRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ImageRemove(ctx, req.(*ImageRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_ImageDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ImageDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ImageDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ImageDefault(ctx, req.(*ImageDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SonicService_ClearNeighbors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearNeighborsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SonicServiceServer).ClearNeighbors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnoi.sonic.SonicService/ClearNeighbors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SonicServiceServer).ClearNeighbors(ctx, req.(*ClearNeighborsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SonicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.sonic.SonicService",
	HandlerType: (*SonicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowTechsupport",
			Handler:    _SonicService_ShowTechsupport_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _SonicService_Sum_Handler,
		},
		{
			MethodName: "CopyConfig",
			Handler:    _SonicService_CopyConfig_Handler,
		},
		{
			MethodName: "ImageInstall",
			Handler:    _SonicService_ImageInstall_Handler,
		},
		{
			MethodName: "ImageRemove",
			Handler:    _SonicService_ImageRemove_Handler,
		},
		{
			MethodName: "ImageDefault",
			Handler:    _SonicService_ImageDefault_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _SonicService_Authenticate_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _SonicService_Refresh_Handler,
		},
		{
			MethodName: "ClearNeighbors",
			Handler:    _SonicService_ClearNeighbors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sonic.proto",
}

func (m *SonicOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SonicOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SonicOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusDetail) > 0 {
		i -= len(m.StatusDetail)
		copy(dAtA[i:], m.StatusDetail)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.StatusDetail)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintSonic(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TechsupportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechsupportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TechsupportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TechsupportRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechsupportRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TechsupportRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TechsupportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechsupportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TechsupportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TechsupportResponse_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechsupportResponse_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TechsupportResponse_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputFilename) > 0 {
		i -= len(m.OutputFilename)
		copy(dAtA[i:], m.OutputFilename)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.OutputFilename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClearNeighborsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearNeighborsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearNeighborsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClearNeighborsRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearNeighborsRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearNeighborsRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ifname) > 0 {
		i -= len(m.Ifname)
		copy(dAtA[i:], m.Ifname)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Ifname)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Family) > 0 {
		i -= len(m.Family)
		copy(dAtA[i:], m.Family)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Family)))
		i--
		dAtA[i] = 0x12
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClearNeighborsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearNeighborsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearNeighborsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClearNeighborsResponse_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearNeighborsResponse_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearNeighborsResponse_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SumRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SumRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Right != 0 {
		i = encodeVarintSonic(dAtA, i, uint64(m.Right))
		i--
		dAtA[i] = 0x10
	}
	if m.Left != 0 {
		i = encodeVarintSonic(dAtA, i, uint64(m.Left))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SumResponse_Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SumResponse_Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SumResponse_Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintSonic(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CopyConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyConfigRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyConfigRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyConfigRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Overwrite {
		i--
		if m.Overwrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageInstallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageInstallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageInstallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageInstallRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageInstallRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageInstallRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Imagename) > 0 {
		i -= len(m.Imagename)
		copy(dAtA[i:], m.Imagename)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Imagename)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ImageInstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageInstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageInstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageRemoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRemoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRemoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageRemoveRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRemoveRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRemoveRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Imagename) > 0 {
		i -= len(m.Imagename)
		copy(dAtA[i:], m.Imagename)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Imagename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageRemoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageRemoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageRemoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageDefaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageDefaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageDefaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageDefaultRequest_Input) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageDefaultRequest_Input) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageDefaultRequest_Input) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Imagename) > 0 {
		i -= len(m.Imagename)
		copy(dAtA[i:], m.Imagename)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Imagename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageDefaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageDefaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageDefaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JwtToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JwtToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwtToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresIn != 0 {
		i = encodeVarintSonic(dAtA, i, uint64(m.ExpiresIn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSonic(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RefreshRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RefreshResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonic(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSonic(dAtA []byte, offset int, v uint64) int {
	offset -= sovSonic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SonicOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSonic(uint64(m.Status))
	}
	l = len(m.StatusDetail)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *TechsupportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *TechsupportRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *TechsupportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *TechsupportResponse_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutputFilename)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ClearNeighborsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ClearNeighborsRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Force {
		n += 2
	}
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	l = len(m.Ifname)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ClearNeighborsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ClearNeighborsResponse_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *SumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *SumRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Left != 0 {
		n += 1 + sovSonic(uint64(m.Left))
	}
	if m.Right != 0 {
		n += 1 + sovSonic(uint64(m.Right))
	}
	return n
}

func (m *SumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *SumResponse_Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovSonic(uint64(m.Result))
	}
	return n
}

func (m *CopyConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *CopyConfigRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	if m.Overwrite {
		n += 2
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *CopyConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageInstallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageInstallRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imagename)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageInstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageRemoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageRemoveRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imagename)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageRemoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageDefaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageDefaultRequest_Input) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Imagename)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *ImageDefaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *JwtToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovSonic(uint64(m.ExpiresIn))
	}
	return n
}

func (m *AuthenticateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *AuthenticateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func (m *RefreshRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RefreshResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSonic(uint64(l))
	}
	return n
}

func sovSonic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSonic(x uint64) (n int) {
	return sovSonic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SonicOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SonicOutput{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusDetail:` + fmt.Sprintf("%v", this.StatusDetail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TechsupportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TechsupportRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "TechsupportRequest_Input", "TechsupportRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TechsupportRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TechsupportRequest_Input{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TechsupportResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TechsupportResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "TechsupportResponse_Output", "TechsupportResponse_Output", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TechsupportResponse_Output) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TechsupportResponse_Output{`,
		`OutputFilename:` + fmt.Sprintf("%v", this.OutputFilename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearNeighborsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearNeighborsRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "ClearNeighborsRequest_Input", "ClearNeighborsRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearNeighborsRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearNeighborsRequest_Input{`,
		`Force:` + fmt.Sprintf("%v", this.Force) + `,`,
		`Family:` + fmt.Sprintf("%v", this.Family) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Ifname:` + fmt.Sprintf("%v", this.Ifname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearNeighborsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearNeighborsResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "ClearNeighborsResponse_Output", "ClearNeighborsResponse_Output", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClearNeighborsResponse_Output) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClearNeighborsResponse_Output{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SumRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SumRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "SumRequest_Input", "SumRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SumRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SumRequest_Input{`,
		`Left:` + fmt.Sprintf("%v", this.Left) + `,`,
		`Right:` + fmt.Sprintf("%v", this.Right) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SumResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SumResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "SumResponse_Output", "SumResponse_Output", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SumResponse_Output) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SumResponse_Output{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CopyConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CopyConfigRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "CopyConfigRequest_Input", "CopyConfigRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CopyConfigRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CopyConfigRequest_Input{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Overwrite:` + fmt.Sprintf("%v", this.Overwrite) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CopyConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CopyConfigResponse{`,
		`Output:` + strings.Replace(this.Output.String(), "SonicOutput", "SonicOutput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageInstallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageInstallRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "ImageInstallRequest_Input", "ImageInstallRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageInstallRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageInstallRequest_Input{`,
		`Imagename:` + fmt.Sprintf("%v", this.Imagename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageInstallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageInstallResponse{`,
		`Output:` + strings.Replace(this.Output.String(), "SonicOutput", "SonicOutput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRemoveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRemoveRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "ImageRemoveRequest_Input", "ImageRemoveRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRemoveRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRemoveRequest_Input{`,
		`Imagename:` + fmt.Sprintf("%v", this.Imagename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageRemoveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageRemoveResponse{`,
		`Output:` + strings.Replace(this.Output.String(), "SonicOutput", "SonicOutput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageDefaultRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageDefaultRequest{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "ImageDefaultRequest_Input", "ImageDefaultRequest_Input", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageDefaultRequest_Input) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageDefaultRequest_Input{`,
		`Imagename:` + fmt.Sprintf("%v", this.Imagename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageDefaultResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageDefaultResponse{`,
		`Output:` + strings.Replace(this.Output.String(), "SonicOutput", "SonicOutput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JwtToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JwtToken{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ExpiresIn:` + fmt.Sprintf("%v", this.ExpiresIn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticateRequest{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticateResponse{`,
		`Token:` + strings.Replace(this.Token.String(), "JwtToken", "JwtToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RefreshRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RefreshResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RefreshResponse{`,
		`Token:` + strings.Replace(this.Token.String(), "JwtToken", "JwtToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSonic(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SonicOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SonicOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SonicOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechsupportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechsupportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechsupportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TechsupportRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechsupportRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechsupportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechsupportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechsupportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &TechsupportResponse_Output{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechsupportResponse_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputFilename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearNeighborsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearNeighborsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearNeighborsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &ClearNeighborsRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearNeighborsRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ifname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ifname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearNeighborsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearNeighborsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearNeighborsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ClearNeighborsResponse_Output{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearNeighborsResponse_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &SumRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &SumResponse_Output{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SumResponse_Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &CopyConfigRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyConfigRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &SonicOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageInstallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageInstallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageInstallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &ImageInstallRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageInstallRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imagename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imagename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageInstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageInstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageInstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &SonicOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRemoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRemoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRemoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &ImageRemoveRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRemoveRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imagename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imagename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageRemoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageRemoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageRemoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &SonicOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageDefaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageDefaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageDefaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &ImageDefaultRequest_Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageDefaultRequest_Input) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Input: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Input: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imagename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imagename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageDefaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageDefaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageDefaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &SonicOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JwtToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JwtToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JwtToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &JwtToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonic
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &JwtToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSonic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSonic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSonic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSonic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSonic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSonic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSonic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSonic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSonic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSonic = fmt.Errorf("proto: unexpected end of group")
)
