--- ./github.com/jipanyang/gnxi/gnmi_get/gnmi_get.go	2019-11-26 15:44:07.303598063 -0800
+++ ./github.com/jipanyang/gnxi/gnmi_get/gnmi_get.go	2019-12-19 19:56:11.364223008 -0800
@@ -30,7 +30,7 @@
 	"github.com/google/gnxi/utils"
 	"github.com/google/gnxi/utils/credentials"
 	"github.com/jipanyang/gnxi/utils/xpath"
-
+	"google.golang.org/grpc/metadata"
 	pb "github.com/openconfig/gnmi/proto/gnmi"
 )
 
@@ -63,11 +63,12 @@
 	xPathFlags       arrayFlags
 	pbPathFlags      arrayFlags
 	pbModelDataFlags arrayFlags
-	pathTarget       = flag.String("xpath_target", "CONFIG_DB", "name of the target for which the path is a member")
+	pathTarget       = flag.String("xpath_target", "", "name of the target for which the path is a member")
 	targetAddr       = flag.String("target_addr", "localhost:10161", "The target address in the format of host:port")
 	targetName       = flag.String("target_name", "hostname.com", "The target name use to verify the hostname returned by TLS handshake")
 	timeOut          = flag.Duration("time_out", 10*time.Second, "Timeout for the Get request, 10 seconds by default")
 	encodingName     = flag.String("encoding", "JSON_IETF", "value encoding format to be used")
+	jwtToken         = flag.String("jwt_token", "", "JWT Token if required")
 )
 
 func main() {
@@ -88,6 +89,10 @@
 	ctx, cancel := context.WithTimeout(context.Background(), *timeOut)
 	defer cancel()
 
+	if len(*jwtToken) > 0 {
+		ctx = metadata.AppendToOutgoingContext(ctx, "access_token", *jwtToken)
+	}
+
 	encoding, ok := pb.Encoding_value[*encodingName]
 	if !ok {
 		var gnmiEncodingList []string
